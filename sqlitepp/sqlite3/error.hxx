#pragma once

#include <sqlite3.h>


namespace sqlitepp {
    namespace sqlite3 {

        enum class error {
            OK = SQLITE_OK,
            ERROR = SQLITE_ERROR,
            INTERNAL = SQLITE_INTERNAL,
            PERM = SQLITE_PERM,
            ABORT = SQLITE_ABORT,
            BUSY = SQLITE_BUSY,
            LOCKED = SQLITE_LOCKED,
            NOMEM = SQLITE_NOMEM,
            READONLY = SQLITE_READONLY,
            INTERRUPT = SQLITE_INTERRUPT,
            IOERR = SQLITE_IOERR,
            CORRUPT = SQLITE_CORRUPT,
            NOTFOUND = SQLITE_NOTFOUND,
            FULL = SQLITE_FULL,
            CANTOPEN = SQLITE_CANTOPEN,
            PROTOCOL = SQLITE_PROTOCOL,
            EMPTY = SQLITE_EMPTY,
            SCHEMA = SQLITE_SCHEMA,
            TOOBIG = SQLITE_TOOBIG,
            CONSTRAINT = SQLITE_CONSTRAINT,
            MISMATCH = SQLITE_MISMATCH,
            MISUSE = SQLITE_MISUSE,
            NOLFS = SQLITE_NOLFS,
            AUTH = SQLITE_AUTH,
            FORMAT = SQLITE_FORMAT,
            RANGE = SQLITE_RANGE,
            NOTADB = SQLITE_NOTADB,
            NOTICE = SQLITE_NOTICE,
            WARNING = SQLITE_WARNING,
            ROW = SQLITE_ROW,
            DONE = SQLITE_DONE,
            OK_LOAD_PERMANENTLY = SQLITE_OK_LOAD_PERMANENTLY,
            BUSY_RECOVERY = SQLITE_BUSY_RECOVERY,
            LOCKED_SHAREDCACHE = SQLITE_LOCKED_SHAREDCACHE,
            READONLY_RECOVERY = SQLITE_READONLY_RECOVERY,
            IOERR_READ = SQLITE_IOERR_READ,
            CORRUPT_VTAB = SQLITE_CORRUPT_VTAB,
            CANTOPEN_NOTEMPDIR = SQLITE_CANTOPEN_NOTEMPDIR,
            CONSTRAINT_CHECK = SQLITE_CONSTRAINT_CHECK,
            NOTICE_RECOVER_WAL = SQLITE_NOTICE_RECOVER_WAL,
            WARNING_AUTOINDEX = SQLITE_WARNING_AUTOINDEX,
            ABORT_ROLLBACK = SQLITE_ABORT_ROLLBACK,
            BUSY_SNAPSHOT = SQLITE_BUSY_SNAPSHOT,
            READONLY_CANTLOCK = SQLITE_READONLY_CANTLOCK,
            IOERR_SHORT_READ = SQLITE_IOERR_SHORT_READ,
            CANTOPEN_ISDIR = SQLITE_CANTOPEN_ISDIR,
            CONSTRAINT_COMMITHOOK = SQLITE_CONSTRAINT_COMMITHOOK,
            NOTICE_RECOVER_ROLLBACK = SQLITE_NOTICE_RECOVER_ROLLBACK,
            READONLY_ROLLBACK = SQLITE_READONLY_ROLLBACK,
            IOERR_WRITE = SQLITE_IOERR_WRITE,
            CANTOPEN_FULLPATH = SQLITE_CANTOPEN_FULLPATH,
            CONSTRAINT_FOREIGNKEY = SQLITE_CONSTRAINT_FOREIGNKEY,
            READONLY_DBMOVED = SQLITE_READONLY_DBMOVED,
            IOERR_FSYNC = SQLITE_IOERR_FSYNC,
            CANTOPEN_CONVPATH = SQLITE_CANTOPEN_CONVPATH,
            CONSTRAINT_FUNCTION = SQLITE_CONSTRAINT_FUNCTION,
            IOERR_DIR_FSYNC = SQLITE_IOERR_DIR_FSYNC,
            CONSTRAINT_NOTNULL = SQLITE_CONSTRAINT_NOTNULL,
            IOERR_TRUNCATE = SQLITE_IOERR_TRUNCATE,
            CONSTRAINT_PRIMARYKEY = SQLITE_CONSTRAINT_PRIMARYKEY,
            IOERR_FSTAT = SQLITE_IOERR_FSTAT,
            CONSTRAINT_TRIGGER = SQLITE_CONSTRAINT_TRIGGER,
            IOERR_UNLOCK = SQLITE_IOERR_UNLOCK,
            CONSTRAINT_UNIQUE = SQLITE_CONSTRAINT_UNIQUE,
            IOERR_RDLOCK = SQLITE_IOERR_RDLOCK,
            CONSTRAINT_VTAB = SQLITE_CONSTRAINT_VTAB,
            IOERR_DELETE = SQLITE_IOERR_DELETE,
            CONSTRAINT_ROWID = SQLITE_CONSTRAINT_ROWID,
            IOERR_BLOCKED = SQLITE_IOERR_BLOCKED,
            IOERR_NOMEM = SQLITE_IOERR_NOMEM,
            IOERR_ACCESS = SQLITE_IOERR_ACCESS,
            IOERR_CHECKRESERVEDLOCK = SQLITE_IOERR_CHECKRESERVEDLOCK,
            IOERR_LOCK = SQLITE_IOERR_LOCK,
            IOERR_CLOSE = SQLITE_IOERR_CLOSE,
            IOERR_DIR_CLOSE = SQLITE_IOERR_DIR_CLOSE,
            IOERR_SHMOPEN = SQLITE_IOERR_SHMOPEN,
            IOERR_SHMSIZE = SQLITE_IOERR_SHMSIZE,
            IOERR_SHMLOCK = SQLITE_IOERR_SHMLOCK,
            IOERR_SHMMAP = SQLITE_IOERR_SHMMAP,
            IOERR_SEEK = SQLITE_IOERR_SEEK,
            IOERR_DELETE_NOENT = SQLITE_IOERR_DELETE_NOENT,
            IOERR_MMAP = SQLITE_IOERR_MMAP,
            IOERR_GETTEMPPATH = SQLITE_IOERR_GETTEMPPATH,
            IOERR_CONVPATH = SQLITE_IOERR_CONVPATH
        };

    }
}
